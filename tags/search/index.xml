<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>search on naipia</title><link>https://naipia.github.io/tags/search/</link><description>Recent content in search on naipia</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://naipia.github.io/tags/search/index.xml" rel="self" type="application/rss+xml"/><item><title>ビット全探索</title><link>https://naipia.github.io/procon-lib-go/bit-exhaustive-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naipia.github.io/procon-lib-go/bit-exhaustive-search/</guid><description>1func bitExhaustiveSearch(n int, fn func(a []bool)) { 2 all := 1 &amp;lt;&amp;lt; uint(n) 3 a := make([]bool, n) 4 for i := 0; i &amp;lt; all; i++ { 5 for j := 0; j &amp;lt; n; j++ { 6 if i&amp;gt;&amp;gt;uint(j)&amp;amp;1 == 1 { 7 a[j] = true 8 } else { 9 a[j] = false 10 } 11 } 12 fn(a) 13 } 14} 15</description></item><item><title>順列全探索</title><link>https://naipia.github.io/procon-lib-go/permutation-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://naipia.github.io/procon-lib-go/permutation-search/</guid><description>1func permutationSearch(n int, fn func(a []int)) { 2 a := make([]int, n) 3 for i := 0; i &amp;lt; n; i++ { 4 a[i] = i 5 } 6 swap := func(i, j int) { a[i], a[j] = a[j], a[i] } 7 8 fn(a) 9 for i := n - 2; i &amp;gt;= 0; i-- { 10 if a[i] &amp;gt; a[i+1] { 11 continue 12 } 13 for j := n - 1; j &amp;gt;= 0; j-- { 14 if a[i] &amp;gt; a[j] { 15 continue 16 } 17 swap(i, j) 18 for k := i + 1; k &amp;lt; (n+i+1)/2; k++ { 19 swap(k, n-(k-i)) 20 } 21 fn(a) 22 i = n - 1 23 break 24 } 25 } 26} 27</description></item></channel></rss>